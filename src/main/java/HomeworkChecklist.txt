TODO HOMEWORK CHECKLIST:
PROGRAMMING TASKS
    BaseShape.java
        [X] Create a valid and logical constructor
        [X] Create all logical 'Setter' methods and have each method's 'scope' correct
    Rectangle.java
        [X] Update this class to inherit from BaseShape.java
        [X] Update to a valid and logical constructor
        [X] Add a static main method
    EquilateralTriangle.java
        [X] Update this class to inherit from BaseShape.java
        [X] Update to a valid and logical constructor
        [X] Override the area method
        [X] Override the perimeter method
        [X] Add a static main method
    SquareTest.java, Rectangle.java and EquilateralTriangleTest.java
        [X] Uncomment any code, now that the shape classes are complete.
        [X] Run all tests
    ShapeFactory.java
        [X] Uncomment any marked code in both CreateShape methods
    ShapeTests.java
        [X] Run all tests

 SHORT ANSWERS
    // TODO FOR HOMEWORK: Answer each question, and note many don't have a 'right answer' so just answer honestly
    [X] What is the purpose of a constructor
         ANSWER HERE: constructors initializes the newly created object of the given class.

    [X] This project uses 'inheritance' for each shape, since they all have 'BaseShape' as their parent.
        In your own words define what you believe 'inheritance' means.
        ANSWER HERE: inheritance means that all the properties and methods of the parent class can be inherited/or can be used by the subclass

    [X] Research the concept of 'Object Oriented Programming (OOP)', and write down the 4 principles of 'OOP'.
        ANSWER HERE:
            1) Encapsulation
            2) Inheritance
            3) Polymorphism
            4) Abstraction

    [X] What are some advantages of 'inheritance'
        ANSWER HERE: the child class can reuse the properties and methods from the parent class thus we can achieve code reusability

    [X] In the ShapeFactory.java class, there are two methods both called CreateShape.
        One method takes in 3 parameters - Shape Name, length and height
        One method takes in 2 parameters - Shape Name and length

        This concept is called 'polymorphism', research 'polymorphism' and write below why Factory used 'polymorphism'
        ANSWER HERE: Polymorphism is used so that the same method name can be called with different parameters. This is also called method overloading. Polymorphism makes it possible to write a method that can process different functions.

    [X] Does this project ever cover the concept of 'Abstraction'? If yes, how so?
        ANSWER HERE: Yes, abstraction hides the complexity of the code. Here we can see that if the user wants to get the area of the rectangle, the user will just call the area() method. The user does not need to know how area is computed and implemented inside.

    [X] Does this project ever cover the concept of 'Encapsulation'? If yes, how so?
        ANSWER HERE: Yes encapsulation is used through getters and setters. The private variables can only be accessed through getters and setters, so it prevents other classes to access the private fields.

    [X] Why did you need to 'override' the 'area' and 'perimeter' methods in 'EquilateralTriangle.java' but not the
        'Square.java' and 'Rectangle.java'?
        ANSWER HERE: It is because the area and perimeter of EquilateralTriangle has different computations/formula than the area and perimeter of the square and rectangle. The area and perimeter of both square and rectangle has the same implementation.

    [X] We made 'ShapeTests' differently than we did 'SquareTest', 'RectangleTest' and 'EquilateralTriangleTest'
        A unit test is testing a single unit and generally that means by classes in java.
        'SquareTest', 'RectangleTest' and 'EquilateralTriangleTest' are all unit tests.
        'ShapeTests' was testing with each shape as a generic 'BaseShape' instead of the previous shape classes.
        Is 'ShapeTests' a unit test of 'ShapeFactory.java'?
        ANSWER HERE: Yes, ShapeTests actually covers the testing of the methods in ShapeFactory, BaseShape, EquilateralTriangle, Rectangle, and Square.
